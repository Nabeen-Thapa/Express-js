jwt (JSON web token)

intro
- it is an open sandard that defines a compact and self-contained way for securely transmitting information , between parties as a json object

scenarios where JWT are useful
    1) Autorization : most common scanarion for using JWT, Once the user is logged in, each subsequent request will include the JWT, allowing the user to access routes, services, and resources that are permitted with that token. 

    2) information exchange : JWT are good way of securely transmitting information between parties. Because JWTs can be signed.

JWT structure 
    it contains 3 parts seperate by dots(.),
    which are:
        -header
        -payload
        -signature
    JWT typically looks like
        - xxxxx.yyyyy.zzzzz

    about the parts
        header
            - consist 2 parts: the type of token, which is JWT and the signing algorithm being used, such as HMAC SHA256 or RSA
            e.g
            {
                "alg" : "HS356",
                "typ" : "JWT"
            }
            Then, this JSON is Base64Url encoded to form the first part of the JWT.
        paymoad
            - contains the claims.
            - . Claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public, and private claims.
                -Registered claims
                -public claims
                -private claims
            payload could be:
                {
                  "sub": "1234567890",
                  "name": "John Doe",
                  "admin": true
                }
                The payload is then Base64Url encoded to form the second part of the JSON Web Token.

        signature
            -to create the signature part we have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.
            -e.g for HMAC SHA256 algorithm:
            HMACSHA256(
            base64UrlEncode(header) + "." +
            base64UrlEncode(payload),
            secret)
            -The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is.

how JWT works
    -In authentication, when the user successfully logs in using their credentials, a JSON Web Token will be returned. Since tokens are credentials, great care must be taken to prevent security issues. In general, you should not keep tokens longer than required.Whenever the user wants to access a protected route or resource, the user agent should send the JWT, typically in the Authorization header using the Bearer schema.
    -Authorization header using the Bearer schema:
        Authorization: Bearer <token>
        
    -The application or client requests authorization to the authorization server. This is performed through one of the different authorization flows. For example, a typical OpenID Connect compliant web application will go through the /oauth/authorize endpoint using the authorization code flow.
    -When the authorization is granted, the authorization server returns an access token to the application.
    -The application uses the access token to access a protected resource (like an API).

why WJT ?
    let's compare JSON Web Tokens (JWT) and Simple Web Tokens (SWT) and Security Assertion Markup Language Tokens (SAML).
    -JSOn is less verbal than xm
    - more compatact than SAML because less size after encoded,
    -JWT tokens can use a public/private key pair in the form of a X:509 certificate for signing
    -easy to siginig Digital signature compare to xml,
    -JSON parses directly objects which is common in most laguage, this make easy to eork with JWT
    - 

